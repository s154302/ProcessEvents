@App:name("GithubEvents")

@source(type='http', receiver.url='http://localhost:8083/GithubEvents', @map(type='json'))
define stream CamundaInputStream(instanceID string, issueName string);

@source(type='http', receiver.url='http://localhost:8081/GithubEvents', @map(type='json'))
define stream Issues (
    id string, 
    type string, 
    actor string, 
    repo string, 
    payload string, 
    locked string, 
    assignee string, assignees string, 
    milestone string, 
    comments int, 
    created_at string, updated_at string, closed_at string, 
    author_association string, 
    body string, 
    state string, 
    comment string,
    public string);
    
@source(type='inMemory', topic='issue-payload', @map(type='json'))
@sink(type='log')
define stream IssuesPayload(action string, issue string);

@source(type='http', receiver.url='http://localhost:8082/GithubEvents', @map(type='json'))
@sink(type='log')
define stream Event (
    id string,
    type string,
    actor string,
    repo string,
    payload string,
    public string,
    created_at string);

@sink(type='http',
    publisher.url='http://127.0.0.1:8080/engine-rest/message',
    headers='Content-Type:application/json',
    @map(type='json'),
    @payload("""{"messageName":"implementation begun","processInstanceId" : "{{instanceId}}"}"""))
define stream CreatedIssues(instanceId string);

from Issues#json:tokenizeAsObject(payload, '$.payload')
select 
    json:getString(jsonElement, '$.action') as action,
    json:getString(jsonElement, '$.issue') as issue
insert into IssuesPayload;

from IssuesPayload as I join CamundaInputStream as C on I.action == C.issueName
select I.action as instanceId
insert into CreatedIssues;
