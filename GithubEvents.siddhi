@App:name("GithubEvents")

-- HTTP STREAMS --
-- Stream that catches events sent by camunda to obtain instanceID --
@source(type = 'http', receiver.url = 'http://localhost:8081/GithubEvents/Camunda/Issue', 
	@map(type = 'json'))
@sink(type='log') 
define stream CamundaIssueStream(instanceID string, issueName string);

@source(type = 'http', receiver.url = 'http://localhost:8081/GithubEvents/Camunda/PullRequest', 
	@map(type = 'json', fail.on.missing.attribute  = "false"))
@sink(type='log') 
define stream CamundaPullRequestStream(instanceID string, requestnum string, feedback string);

-- Stream that catches any non-issue events from GitHub --
@source(type = 'http', receiver.url = 'http://localhost:8081/GithubEvents/Github/Events', 
	@map(type = 'json', fail.on.missing.attribute = "false"))
define stream Events (
    id string,
    type string,
    actor string,
    repo string,
    payload string,
    public string,
    created_at string, updated_at string, closed_at string, pushed_at string,
    merged_at string, merge_commit_sha string, requested_reviewers string,
    assignee string, assignees string,
    requested_teams string,
    labels string,
    milestone string,
    commits_url string, review_comments_url string, review_comment_url string, comments_url string, statuses_url string, url string, forks_url string, keys_url string, collaborators_url string, teams_url string, hooks_url string, issue_events_url string, events_url string, issues_url string,
    assignees_url string, 
    branches_url string, 
    tags_url string, 
    blobs_url string, 
    git_tags_url string, 
    git_refs_url string, 
    trees_url string, 
    languages_url string, 
    stargazers_url string, 
    contributors_url string, 
    subscribers_url string, 
    subscription_url string,
    git_commits_url string,
    issue_comment_url string, 
    contents_url string, 
    compare_url string, 
    merges_url string, 
    archive_url string, 
    downloads_url string,
    pulls_url string, 
    milestones_url string, 
    notifications_url string, 
    labels_url string, 
    releases_url string, 
    deployments_url string, 
    git_url string, 
    ssh_url string, 
    clone_url string, 
    svn_url string,
    homepage string, 
    size string, 
    stargazers_count string, 
    watchers_count string, 
    language string, 
    has_issues string, 
    has_projects string, 
    has_downloads string, 
    has_wiki string, 
    has_pages string, 
    forks_count string, 
    mirror_url string, 
    archived string, 
    disabled string, 
    open_issues_count string, 
    license string, 
    forks string, 
    open_issues string, 
    watchers string, 
    default_branch string,
    base string,
    _links string,
    statuses string,
    author_association string, 
    merged string, 
    mergeable string, 
    rebaseable string, 
    mergeable_state string, 
    merged_by string, 
    comments string, 
    review_comments string, 
    maintainer_can_modify string, 
    commits string, 
    additions string, 
    deletions string, 
    changed_files string,
    head string, fork string,
    description string);

-- Stream that catches any issue related events from GitHub --
@source(type = 'http', receiver.url = 'http://localhost:8081/GithubEvents/Github/Issues', 
	@map(type = 'json', fail.on.missing.attribute = "false"))
define stream Issues (
 id string, 
 type string, 
 actor string, 
 repo string, 
 payload string, 
 public string,
 created_at string, updated_at string, closed_at string,
 locked string,
 assignee string, assignees string,
 milestone string,
 comments string,
 author_association string,
 pull_request string,
 body string,
 state string,
 comment string);

 
-- Send message to Camunda --
@sink(type = 'http',
	publisher.url = 'http://127.0.0.1:8080/engine-rest/message',
	header = "'Host:http://127.0.0.1:8080",
	@map(type = 'json', 
	@payload("""{"messageName":"{{message}}","processInstanceId" : "{{instanceId}}"}""")))
@sink(type='log') 
define stream MessageStream(instanceId string, message string);

-- INTERMEDIATE STREAMS --    
-- Stream to filter relevant info from issue event --
@sink(type='log') 
define stream IssuesPayload(action string, title string);

-- Stream to filter all comments on issues --
@sink(type='log') 
define stream IssuesCommentStream(action string, number string);

-- Stream to filter relevant info from a pull request event --
@sink(type='log') 
define stream PullRequestPayload(action string, number string);

-- QUERIES --

-- Get action and title from issue and insert into IssuesPayload stream --
from Issues[type == 'IssuesEvent']
select 
 json:getString(json:toObject(payload), '$.action') as action,
 json:getString(json:getObject(json:toObject(payload), '$.issue'), '$.title') as title
insert into IssuesPayload;

-- Get comment events for issues --
from Issues[type == 'IssueCommentEvent']
select 
 json:getString(json:toObject(payload), '$.action') as action,
 json:getString(json:getObject(json:toObject(payload), '$.issue'), '$.number') as number
insert into IssuesCommentStream;

from IssuesCommentStream as I 
 join PullRequestPayload as P 
 	on I.number == P.number and I.action == 'created'
select
 I.action as action,
 I.number as number
insert into PullRequestPayload;

-- Get action and number from pull request issue and insert into PullRequestPayload stream --
from Events[type == 'PullRequestEvent']
select 
 json:getString(json:toObject(payload), '$.action') as action,
 json:getString(json:toObject(payload), '$.number') as number
insert into PullRequestPayload;

-- Join Payload stream and CamundaInput stream and send message to Camunda process with given instance ID --
-- Begin implementation --
from IssuesPayload[action == 'opened']#window.time(10min)
 join CamundaIssueStream
 	on title == issueName
select 
 instanceID as instanceId, 
 'begin implementation' as message
insert into MessageStream;

-- Pull request has been opened for review --
from PullRequestPayload[action == 'opened']#window.time(10min)
 join CamundaPullRequestStream[feedback != 'yes']#window.time(10min)
 	on number == requestnum
select
 instanceID as instanceId,
 'receive review request' as message
insert into MessageStream;

-- Pull request has been reviewed --
from PullRequestPayload[action == 'closed' or action == 'created']#window.time(10min)
 join CamundaPullRequestStream[feedback == 'yes']#window.time(10min) 
 	on number == requestnum
select
 instanceID as instanceId,
 'feedback received' as message
insert into MessageStream;
